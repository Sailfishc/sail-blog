<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 橙小张的博客</title>
    <link>https://blog.sailfishc.cn/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 橙小张的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 26 Mar 2020 23:00:40 +0800</lastBuildDate><atom:link href="https://blog.sailfishc.cn/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode 21. Merge Two Sorted Lists</title>
      <link>https://blog.sailfishc.cn/algorithm/leetcode-21/</link>
      <pubDate>Thu, 26 Mar 2020 23:00:40 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/algorithm/leetcode-21/</guid>
      <description>题目解读 Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists. Example: Input: 1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4 Output: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4  注意事项
  两个链表都是有序的  思考路径 第一遍思路  我是在Educative上做的题目，题目的原始代码结构对我有一定的误区，因为他的题目结构是这样的：
 public static LinkedListNode mergeSorted(LinkedListNode head1, LinkedListNode head2) { //TODO: Write - Your - Code return head1; } 已经指定了必须返回head1,基于这个设定，我的思路如下：
 比较head1和head2的第一个值，如果head1.val小于head2.val，那么head1和head2交换 设置node1和node2，分别赋值为head1和head2 这个时候我思考了几个case：  当node1 &amp;lt;= node2 &amp;lt;= node.</description>
    </item>
    
    <item>
      <title>LeetCode 283. Move Zeroes</title>
      <link>https://blog.sailfishc.cn/algorithm/leetcode283-movezeros/</link>
      <pubDate>Thu, 26 Mar 2020 13:55:37 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/algorithm/leetcode283-movezeros/</guid>
      <description>题目解读 Given an array nums, write a function to move all 0&#39;s to the end of it while maintaining the relative order of the non-zero elements. Example: Input: [0,1,0,3,12] Output: [1,3,12,0,0] Note: 1. You must do this in-place without making a copy of the array. 2. Minimize the total number of operations.  注意点：
  维持数组的相对顺序，也就是不能改变非0元素的相对顺序 不使用新的数组 最少的操作数（操作数指的是对数组的赋值操作）  思路  这道题难度是easy，思路也比较简单，有点类似快慢指针的做法
  定义一个索引nonZero（慢指针），定义为在[0, nonZero]的元素都是符合条件的 遍历数组，索引下标为index（快指针） 如果index对应的值不等于0，则将index的值赋值给nonZero索引，将index和nonZero索引向后移动 如果index对应的值等于0，则只移动index的值 直到index遍历结束 这个时候nonZero的之前的元素已经是数组中全部不为0的数了，只需要把(nonZero, 数组长度)的值赋值为0即可  代码 public void moveZeroes(int[] nums) { if (nums == null || nums.</description>
    </item>
    
    <item>
      <title>LeetCode189 RotateArray</title>
      <link>https://blog.sailfishc.cn/algorithm/leetcode189-rotatearray/</link>
      <pubDate>Sat, 21 Mar 2020 19:32:55 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/algorithm/leetcode189-rotatearray/</guid>
      <description>Given an array, rotate the array to the right by k steps, where k is non-negative. Example 1: Input: [1,2,3,4,5,6,7] and k = 3 Output: [5,6,7,1,2,3,4] Explanation: rotate 1 steps to the right: [7,1,2,3,4,5,6] rotate 2 steps to the right: [6,7,1,2,3,4,5] rotate 3 steps to the right: [5,6,7,1,2,3,4] Example 2: Input: [-1,-100,3,99] and k = 2 Output: [3,99,-1,-100] Explanation: rotate 1 steps to the right: [99,-1,-100,3] rotate 2 steps to the right: [3,99,-1,-100] Note: Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.</description>
    </item>
    
    <item>
      <title> LeetCode 239. Sliding Window Maximum </title>
      <link>https://blog.sailfishc.cn/algorithm/leetcode239-slidingwindowmaximum/</link>
      <pubDate>Sat, 14 Mar 2020 16:34:51 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/algorithm/leetcode239-slidingwindowmaximum/</guid>
      <description>这道题最开始看其实思路比较简单，但是做的时候发现实现还是挺麻烦的，题目的难度也是Hard，先说说自己做这道题目最开始的一个思路：
 为了方便描述，把输入定义为[1,3,-1,-3,5,3,6,7], k = 3 滑动窗口的移动有两种情况，一种是从窗口从索引0 -&amp;gt; 2移动，另外一种就是窗口长度已经是3之后的窗口移动   下面是自己最开始的思考过程，自己第一遍没有做出来，但是思路是比较接近答案的，这也就是算法中如果没有好的数据结构代码会写的又长又臭的原因
  第一步：对于[1,3,-1]的处理 第二步：对于最大值的处理，最开始想到的是定义一个max变量，然后使用Math.max(max, nums[i])这种方式去处理 第三步：移动窗口，用新进入窗口和上一个窗口最大值作比较，但是这一步有一种特殊情况，那就是得处理上一个窗口移出的值是不是最大值，比如[3,-1,-3中最大值是3，但是移动后，3已经被移除了，当前窗口的最大值是-1，为了解决这给问题自己最开始的思路是添加一个变量去记录是不是上一个窗口的第一个元素  解法一 public static int[] maxSlidingWindow(int[] nums, int k) { if (nums == null || nums.length == 0 || nums.length &amp;lt; k) { return new int[0]; } Deque&amp;lt;Integer&amp;gt; deque = new LinkedList&amp;lt;&amp;gt;(); int[] res = new int[nums.length + 1 - k]; for (int I = 0; I &amp;lt; nums.length; I++) { if (!</description>
    </item>
    
  </channel>
</rss>
