<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>橙小张的博客</title>
    <link>https://blog.sailfishc.cn/</link>
    <description>Recent content on 橙小张的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 10 Nov 2019 16:01:41 +0800</lastBuildDate>
    
	<atom:link href="https://blog.sailfishc.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>开发人员必备的Docker基础</title>
      <link>https://blog.sailfishc.cn/posts/2019/11/%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E5%BF%85%E5%A4%87%E7%9A%84docker%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 10 Nov 2019 16:01:41 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/2019/11/%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E5%BF%85%E5%A4%87%E7%9A%84docker%E5%9F%BA%E7%A1%80/</guid>
      <description>Docker简介 说到Docker，我们就来谈谈业务应用从旧时代到Docker的发展历程。
旧时代 旧时代是基于Application运转的，一台服务器（无虚拟机时代）部署多个Application，不管是Windows还是Linux其实是无法保证在一台服务器上稳定安全的运行多个应用的，CPU，内存等公共资源的竞争导致应用极为不稳定。
VM阶段 VM让世界变得美好了，VM算是划时代意义的技术，但是VM不是完美的，VM会占用宿主机额外的CPU,RAM和存储（VM不够轻量级），启动慢。
Linux容器 容器技术出现的比较早，只是Docker将Linux容器技术广泛应用了，Docker解决了VM的问题以外，还有如下优点：
 容易上手 解决了运维中的环境问题及服务调度的痛点  Docker安装 Docker提供了桌面安装和服务器安装，对于开发来说，我们可以归类为：
 Windows平台 Mac平台 Linux平台：Ubuntu/CentOS  Windows平台 硬件要求：
 win10 64位 启用Hyper-V和容器特性  安装步骤：Install Docker Desktop on Windows | Docker Documentation
 下载Docker for windows安装包： https://www.docker.com/products/docker-desktop 根据安装向导安装 成功后再CMD中输入docker version查看版本，如果有版本信息表示安装成功  Mac平台 Mac版本和Windows桌面版安装类似，找到下载包，静默安装即可： - 下载地址：下载Docker for windows安装包： https://www.docker.com/products/docker-desktop
Ubuntu安装  Ubuntu安装：Get Docker Engine - Community for Ubuntu | Docker Documentation  Ubuntu有几种方式安装Docker，我们使用便捷脚本来安装Docker
 在Linux打开Shell 执行：curl -fsSL https://get.docker.com -o get-docker.</description>
    </item>
    
    <item>
      <title>学习观</title>
      <link>https://blog.sailfishc.cn/posts/2019/11/%E5%AD%A6%E4%B9%A0%E8%A7%82/</link>
      <pubDate>Sun, 03 Nov 2019 21:01:53 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/2019/11/%E5%AD%A6%E4%B9%A0%E8%A7%82/</guid>
      <description>为学习付费，还是为知识付费，亦或者是为信息付费，在高中时看到一个资料，是一套数学的学习模型，当时心情非常激动，被资料宣传的效果倾倒，觉得有一套这样的学习资料，一定会学有所成，但是最终效果一般，也没考上一个好学校，毕业后坚信Just do IT，选择了IT道路，在IT路上，如何学习也是很重要的一门手艺。
介绍 本篇文章主要是从网络资源《学习观》中做的一些总结，主要包含两部分内容：
 学习理论  学习和记忆 信息和知识 知识的分类  学习工具  思维导图 费曼技巧  学习实战  正确的学习方法 如何学习英文   学习 理论知识 学习和记忆 从上学到工作，一直在学习，也有一些号称终生学习的人，但是好像没人告诉我们什么是学习，或者很少人去思考学习是什么？在上学的时候，听课是学习，做题是学习，考试也是学习，但是这个过程中到底哪些步骤才算是学习呢？学习的结果是学会，那怎么才算是学会呢？抽象的思考下，老师在课堂讲解了A，B，C三个知识点，对应给出了A，B，C三个知识点的题目，你将A，B，C三道题的题目解出来了，说明你学会了A，B，C这三个知识点，但是在考试中出现了你没见过的题目，类似AB，AC，BC，甚至是ABC这种组合的题目，你根据学习的A，B，C的基础知识点没有将题目解出来，这说明你没有学会，那学习究竟是什么呢？
我们将这个过程简化去分析下，有3个数：1，2，3，只有一种规则：乘，那么所有的可能性是：
1 * 1 = 1 1 * 2 = 2 1 * 3 = 3 2 * 1 = 2 2 * 2 = 4 2 * 3 = 6 3 * 1 = 3 3 * 2 = 6 3 * 3 = 9  这个数字是规则是有限的（这也是我们小学数学有可能满分，高中大学很难满分的原因），我们可以使用大脑记忆，出现类似题目可以很快的反馈出结果，但是我们真的学会了吗？没有，因为出现2 * 4的时候就不知道结果了，但是我们通过上面的例子去学习，总结出规律，即使出现其他题目也能解出来的过程就是学习。</description>
    </item>
    
    <item>
      <title>科学上网</title>
      <link>https://blog.sailfishc.cn/posts/2019/11/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</link>
      <pubDate>Fri, 01 Nov 2019 09:56:18 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/2019/11/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</guid>
      <description>本文转自左耳朵耗子
 作者：左耳朵 http://coolshell.cn 更新时间：2019-11-01
这篇文章可以写的更好，欢迎到 https://github.com/haoel/haoel.github.io 更新
 科学上网  0. 序 1. 英文能力 2. 购买VPS 2.1 常规VPS 2.2 CN2 线路 2.3 NCP 线路 3. 搭建 Shadowsocks 和 VPN 服务 3.1 设置Docker服务 3.2 开启 TCP BBR 拥塞控制算法 3.3 设置Shadowsocks服务 3.4 设置L2TP/IPSec服务 3.5 设置PPTP服务 4. 客户端设置 4.1 Shadowsocks 客户端 4.2 VPN 客户端 5. 流量伪装和其它方式 5.1 V2Ray 5.2 Brook 6. 针对 IP 被封的解决方案 6.1 Cloudflare 6.2 V2Ray 6.3 补充 7.</description>
    </item>
    
    <item>
      <title>解决添加到GitIgnore的文件没被忽略的问题</title>
      <link>https://blog.sailfishc.cn/posts/2019/10/%E8%A7%A3%E5%86%B3%E6%B7%BB%E5%8A%A0%E5%88%B0gitignore%E7%9A%84%E6%96%87%E4%BB%B6%E6%B2%A1%E8%A2%AB%E5%BF%BD%E7%95%A5%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 30 Oct 2019 09:56:18 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/2019/10/%E8%A7%A3%E5%86%B3%E6%B7%BB%E5%8A%A0%E5%88%B0gitignore%E7%9A%84%E6%96%87%E4%BB%B6%E6%B2%A1%E8%A2%AB%E5%BF%BD%E7%95%A5%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description> 问题简述
 在开发中有时候会遇到把某文件添加到Git Ignore文件中，但是在Commit的时候发现这个文件还是可以被Commit，并没有被忽略掉，在查看了Git的官方文档，发现官网文档已经做了如下解释：
The purpose of gitignore files is to ensure that certain files not tracked by Git remain untracked. To stop tracking a file that is currently tracked, use：git rm —cached.  意思是：gitignore文件的目的是确保未被Git跟踪的某些文件保持未跟踪状态。要停止跟踪当前跟踪的文件，请使用git rm --cached。
 原因
 一般来说出现这种问题的原因是使用了IDE，在创建文件的时候IDE自动给add进去了，被Git追踪管理了。
 具体执行
  如果是单个文件：git rm —cached path/filename 如果是文件夹：git rm -r —cached path   参考文档
  Git - gitignore Documentation Git - git-rm Documentation  </description>
    </item>
    
    <item>
      <title>通过Hugo&#43;Github快速搭建博客</title>
      <link>https://blog.sailfishc.cn/posts/2019/10/%E9%80%9A%E8%BF%87hugo-github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 24 Oct 2019 15:05:56 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/2019/10/%E9%80%9A%E8%BF%87hugo-github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>写在前面
 程序员总想有自己的一个博客，厌倦了CSDN，简书，掘金这些博客网站，那就自己搭建一个吧，这篇文章包含了从0开始搭建到部署，可以没有自己的域名，自己的服务器，但是面包总会有的。
先罗列下常见的博客网站：
 Hexo WordPress JekyII Ghost Hugo  Hexo是我之前用的博客网站，但是在使用过程中遇到了一些问题：
 node环境问题较多，本身对Node不熟悉，解决成本高 node_modules过大，网络问题下载依赖过慢 编译为html过程越来越慢  后来发现了Hugo，发现Github已经3w多star了，Hugo官网对于Hugo的介绍是：The world’s fastest framework for building websites，总结起来就一句话，那就是快！！！
快速开始  Quick Start | Hugo  Hugo安装很简单，就以Mac为例快速开始：
 安装Hugo：brew install Hugo 查看Hugo版本：Hugo version 新建一个网站，名字为quickstart：Hugo new site quickstart 安装主题  进入目录：cd quickstart 使用Git Init创建Git仓库：git init 下载主题，放入theme目录（名字为ananke）：git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke 使用主题：echo ‘theme = “ananke”’ &amp;gt;&amp;gt; config.toml  新建MarkDown文章（也可以用现有的放入content/posts目录）：Hugo new posts/my-first-post.md 本地预览：Hugo server -D 打开浏览器：http://localhost:1313 搞定🌹  部署 本地搭建好了网站要部署到外部服务上，常见的方式有三种：</description>
    </item>
    
    <item>
      <title>以练代学，学习算法和数据结构</title>
      <link>https://blog.sailfishc.cn/posts/2019/10/%E4%BB%A5%E7%BB%83%E4%BB%A3%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 22 Oct 2019 17:37:00 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/2019/10/%E4%BB%A5%E7%BB%83%E4%BB%A3%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>数据结构和算法的学习总是一条漫长而艰辛的道路，做题是一条学习数据结构和算法的捷径，之前自己零零碎碎的刷了一些LeetCode的题，但是效果并不好，后来吸取了一些刷题人的经验，结合自己对于语言知识和数据结构及算法的掌握程度，总结了自己的一套刷题方式。
首先是对自己的定位，熟悉Java语言，对于常用的数据结构比较熟悉，算法较弱，目标是在较短的时间去熟练掌握数据结构和算法，基于这几点，不能走常规的学习路径（如果在校或者是时间比较充裕可以参考）：
 算法导论 数据结构与算法分析 配合LeetCode或者OJ来练习   我的学习计划是这样的（以练代学）：
  寻找LeetCode的Java版最优解实现（至少400题） 将数据结构和算法进行分类（目录见后文） 寻找可以快速熟悉的视频资源（极客时间的算法面试40讲就挺好） 按分类将LeetCode的题目归类，附上题号，LeetCode题目链接，题目难度分类，最优解地址（Github地址），自己的解法地址   具体是这样做的（第一遍）
  先跟着视频学习（例如数组，链表作为一个阶段，去了解理论基础，及几道经典题型解读） 从分类中找出要练习的LeetCode题目 深度思考10分钟去寻找思路 有思路的话写代码，对比最优解 没有思路直接看答案（最好有视频讲解），理解题目解题思路 自己重新做一遍   第二遍刷题（基本同第一遍步骤）
数据结构和算法分类
  数据结构  栈 队列 表  数组 单链表 双链表 循环链表 散列表  二叉树  平衡二叉树 红黑树 哈弗曼树 堆  多叉树  B，B+Tree 字典树  图  有向图 无向图 权图   算法  算法思想  分治 动态规划 贪心 回溯 分支界定  复杂度  时间复杂度 空间复杂度  字符串匹配  BF算法 BM算法 Sunday算法 KMP算法 Tire树  排序  插入排序  希尔 直插  交换排序  冒泡 快排（重点）  选择排序  简单排序 堆排序（重点）  归并排序 基数排序  查找  二分查找 二叉排序树 B数 Hash BloomFilter    </description>
    </item>
    
    <item>
      <title>长期关注的一些博客</title>
      <link>https://blog.sailfishc.cn/link/blog-star/</link>
      <pubDate>Tue, 22 Oct 2019 16:51:04 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/link/blog-star/</guid>
      <description> 酷壳 – CoolShell.cn Martin Kleppmann’s blog DDIA Author List of posts -  Barret李靖 | 小胡子哥的个人网站 阮一峰的网络日志 Doug Lea’s Workstation - JDK Author - AQS 当然我在扯淡 martinfowler.com YouMeek | You Are So Beautiful - 生活技术的典范  </description>
    </item>
    
    <item>
      <title>2018年总结</title>
      <link>https://blog.sailfishc.cn/posts/2019/01/2018%E5%B9%B4%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 13 Jan 2019 17:37:00 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/2019/01/2018%E5%B9%B4%E6%80%BB%E7%BB%93/</guid>
      <description> 2019年很多人都开始写自己的2018年的总结，虽然已经13号了，但是还是要总结下自己的2018，回头一想，一年过得还真快，2018年加入了创业公司，一年竟也过去了，在这一年里面，也没有做出什么成绩，但是还是有点收获，也总结分享一下。
工作  2018年由于一些特殊原因，部门成立了子公司，从零开始，也算是自己第一次加入创业公司
 虽然是换了一家公司，但是身边的小伙伴还是那些，所以并没感到有多大的变化，前几个月该怎么做就怎么做，之后渐渐感到了业务上的压力，创业维艰，伴随着的就是加班多了，迭代快了，要参与到业务中去思考产品的方向了，对于自己来说，自己的职责变了一点，感觉从大公司的螺丝钉找到了一些归属感。这一年，有的老同事离职了，也有新同事进来，自己也开始带人了，虽然不多，但也是要去改变一些工作方式了。
产品迭代 那些日子，每次上线一个版本之后，大家都去喝酒撸串，尽兴的玩。开发之前骂着产品这么多需求，但是产品上线的时候还是开心的。在公司总结上，我还是觉得团队的战斗力没有比一年前变得更强，只是有部分人的能力变强了，
研发 得益于之前公司的基础建设，还是有一些基础储备，项目在RPC，ZK，Cache，监控，构建部署，MQ，DB维护上还是没怎么费力，大家更多的还是专注于业务，但是前期没有一个好的架构师来规划项目架构，以及开发人员的认知能力和业务迭代的紧迫性，导致项目还是有很多问题：
 技术债：虽然很多代码是新写的，但是业务速度和人员水平，还是存在很多技术债 直接搬用了母公司的技术栈，虽然少了很多维护成本，但是技术选型没有选用最新最成熟的解决方案，生产力还是有点欠缺  企业文化 可能由于之前两家公司的关系，对于企业文化来说没什么感觉，就像大学的校训，只是在某些场合有仪式感的说出来，但是在创业公司，企业文化是对产品是有指导作用的，在某些时候，想不出该做什么，老板就要求从企业文化中去创新，一个公司的一些文化还是深深的影响着一些人，他就像人的价值观和人生观一样，应该是牢牢铭记在心中的，这也就是创业公司的迷人之处吧，因为参与程度高，所以会将自己的价值观注入到公司的文化中。
生活 找到了对的人 啥也不说了，找到了对的人，是今年最大的收获
养了只狗 名字叫格林，一只拆家的柯基
技术成长  更多的去思考如何去学习
 我觉得大部分程序员有三个阶段：
 普通程序员 工程师 架构师  普通程序员 普通程序员是占有了80%的人，只关注于实现功能
工程师 去思考程序的可读性，可维护性和健壮性，思考如何高效
架构师 去挑战不可能的事情，尝试设计更高级的技术，更灵活的系统
2018年的好书  心理学 整洁架构 极客时间的部分专栏 DDIA 函数式编程思维 修改代码的艺术 有效的单元测试 如何阅读一本书  </description>
    </item>
    
    <item>
      <title>那些书本中没告诉你的MyBatis</title>
      <link>https://blog.sailfishc.cn/posts/2019/01/%E9%82%A3%E4%BA%9B%E4%B9%A6%E6%9C%AC%E4%B8%AD%E6%B2%A1%E5%91%8A%E8%AF%89%E4%BD%A0%E7%9A%84mybatis/</link>
      <pubDate>Mon, 07 Jan 2019 21:37:00 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/2019/01/%E9%82%A3%E4%BA%9B%E4%B9%A6%E6%9C%AC%E4%B8%AD%E6%B2%A1%E5%91%8A%E8%AF%89%E4%BD%A0%E7%9A%84mybatis/</guid>
      <description>不管是《MyBatis从入门到精通》，还是21天精通MyBatis，都告诉了你怎么做？但是没告诉你为什么以及是什么。
&amp;gt; 本篇将会讲解MyBatis（Spring-MyBatis）的一些关键类，以及关于DB操作的内容
关键类  SqlSessionFactory SqlSessionFactoryBean SqlSession MapperFactoryBean SqlSessionDaoSupport SqlSessionTemplate MapperScannerConfigurer  如何访问数据库 mysql -uadmin -pxxx -h58.87.87.129 -P32007
当我们需要连接MySQL时，需要用到几个属性：
 用户名 密码 地址 端口  这在MySQL中叫一次会话（session），在JDBC中JDBC定义了规范，其实现类具体去操作，在MyBatis中，MyBatis的关键类SqlSession定义了如何去操作数据库，例如：
 selectOne selectAll selectList insert …..  具体的实现类有：
 DefaultSqlSession SqlSessionTemplate SqlSessionManager  当然我们都不会直接使用这几个实现类，我们一般是这样的：
public class UserService { @Resource private UserMapper userMapper; }  那这其中究竟是怎么做到这样简化的呢？
实现细节 SqlSessionFactoryBean&amp;amp;SqlSessionFactory 上面介绍了关键类SqlSession, 那如何创建SqlSession呢？MyBatis使用了工厂方法来创建SqlSession，由于工厂和SqlSession是一对多的关系，也就是说一个Factory可以创建多个SqlSession，MyBatis-Spring将SqlSessionFactory放入了容器的生命周期中，也就出现了SqlSessionFactoryBean，我们一般这样配置：
&amp;lt;bean id=&amp;quot;sqlSessionFactory&amp;quot; class=&amp;quot;org.mybatis.spring.SqlSessionFactoryBean&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot; /&amp;gt; &amp;lt;/bean&amp;gt;   DataSource（必须配置）： SqlSessionFactory 需要一个（也可以是多个） DataSource  MapperFactoryBean 大家都知道MyBatis是基于Mapper的，一般情况MyBatis的一个Mapper就对应一张DB的Table，就有了</description>
    </item>
    
    <item>
      <title>致生活</title>
      <link>https://blog.sailfishc.cn/posts/2018/09/%E8%87%B4%E7%94%9F%E6%B4%BB/</link>
      <pubDate>Sun, 02 Sep 2018 11:37:00 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/2018/09/%E8%87%B4%E7%94%9F%E6%B4%BB/</guid>
      <description> 少年真正成人的那一刻，大概就是，对于你的家人，你会时不时惦记，想念，渴望从他们那里得到抚慰，害怕他们哪天离开人世——他们成为你梦境的常客，内心最柔软的部分；你却无比清楚：纵然爱他们，却再无法同他们心无芥蒂地谈论，或长久地生活在一起。 — 一个
 今天送妈妈去火车站回家了，过来的时间不长不短，来去10天，期间工作比较忙，只有周末有时间出去逛，没去几个地方，只去了故宫、颐和园、森林公园、鸟巢、前门、天安门，这是过年回家之后第一次见我妈，来北京以后基本每年就回一趟家，这次我妈在我的坚持下过来，我就规划着带她吃点好的，买几件衣服，带她逛逛。
去车站接她的时候，她穿着一件橘色的衣服，在人群中显得很突兀，在家的时候还没怎么注意，来北京了，突然发现妈妈已经老了，白头发多了些，她在人群中提着一个箱子，面对人群，有一点慌乱，我想着她做了一天火车了，回来休息一下，第二天再出去，她坚持说自己不累，下午就去周边的森林公园逛了逛，晚上在外面吃了点鱼，吃完就说太贵了。
周六和周天带着她逛，我给她教着怎么会使用地图，怎么使用微信支付，怎么坐地铁，之后我说目的地，妈妈打开地图，给我说路线，我跟着她走，想着上班的时候能自己出去走走，其实她来北京最重要的是陪陪我，不在乎去哪，我上班的那几天，等着我回家，加班很晚，回来已经11点多了，妈妈会倒点牛奶或做点汤给我，其实最温暖的，是回家的时候灯是亮着的，屋里有牵挂着你的人。
昨天我问她感觉北京怎么样，她说就是东西贵，赚得多花的也多，你一个人很孤单。
可能是家庭本身的因素，我妈从小就比较严厉，有些感情也不好表达，现在越大了和爸妈也聊得不多了，每次就是问问身体怎么样啊，家里怎么样啊，家里缺啥吗？这次来给妈妈拍照，妈妈就会看看给她拍的怎么样啊，有时候就说笑起来拍出照片不好看，不笑拍出来也不好看-.-
时间过得很快，今天送她回家了，心情有点低落，觉得有点对不起他们，不在他们身边，现在自己赚钱，但是还是给不了他们好的生活，只希望他们身体健康，争取明年带爸妈出去玩。
 自己好久不写这种非技术文章了，今天特别想写，写的有点乱，每个在外边工作的人，可能心里都有一团火。
 </description>
    </item>
    
  </channel>
</rss>