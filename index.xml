<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>橙小张的博客</title>
    <link>https://blog.sailfishc.cn/</link>
    <description>Recent content on 橙小张的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 21 Jun 2020 21:06:09 +0800</lastBuildDate><atom:link href="https://blog.sailfishc.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基本的Linux命令</title>
      <link>https://blog.sailfishc.cn/posts/2020/06/%E5%9F%BA%E6%9C%AC%E7%9A%84linux%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 21 Jun 2020 21:06:09 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/2020/06/%E5%9F%BA%E6%9C%AC%E7%9A%84linux%E5%91%BD%E4%BB%A4/</guid>
      <description> 可能学习Linux最好的方式是自己搭建科学上网的时候去学习吧😑
 权限  创建用户：sudo useradd -m -s /bin/bash username 设置密码：sodu passwd username 将用户加入sudo组：sudo usermod -G sudo username 切换用户：su -l username   如果没有sudo组，可以使用
 添加sudo组： sudo groupadd sudo 将sudo组加入sudoer：sudo visudo 配置：%sudo ALL=(ALL:ALL) ALL  配置进行免密：%sudo ALL=ALL NOPASSWD:ALL    给用户&amp;amp;用户组设置某个文件&amp;amp;文件夹的权限：sudo chown -R acme:acme /etc/xx/live 设置文件&amp;amp;文件夹的读写权限：chmod -R 750 /etc/letsencrypt/live  包管理  安装包：sudo yum install -y curl 服务管理：  启动服务： sudo systemctl start crond 设置自启动服务（如果服务器挂了重启之后再次启动应用）：sudo systemctl enable crond 重启服务： sudo systemctl restart nginx    目录管理  创建多个文件夹：sudo mkdir -p /etc/xx/live  文本编辑&amp;amp;查看  vi vim nano  服务信息  查看内核版本：uname -a  资料参考  写代码怎能不会这些 Linux 命令？ | 编程和酒  </description>
    </item>
    
    <item>
      <title>程序员PPT写作指南</title>
      <link>https://blog.sailfishc.cn/life/how-to-write-ppt-for-coder/</link>
      <pubDate>Sun, 21 Jun 2020 11:53:04 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/life/how-to-write-ppt-for-coder/</guid>
      <description>前言 这不是一份普适的写作指南，甚至也不是针对某一特定人群的PPT写作指南，具体来说，这份写作指南仅适用于：
 汇报 晋升   本篇博客只有少许参考价值，一些经验只是参考了一些同学的PPT，以及结合自己在写PPT过程中的一点总结，不包含演讲技巧（我也做的比较差）
 如何写PPT  我把做PPT分为三步
  建立框架 收集素材 填充细节  写PPT的开始就是不写PPT 我在以前写PPT的时候会陷入一个误区，那就是写PPT，最开始就会在PPT上去想怎么写，样式怎么调，在很长一段时间内认为的好的PPT就是那种特别炫酷的PPT，比如各种动画，各种特效，也花了一些时间去学习PPT的动画制作，但是，这些都是错误的。
 观点一：PPT只是换了一种表达自己想法的方式，PPT本身和你写一篇博客，说一段话，发一个语音没有本质的区别
观点二：不要在意特效/动画
 使用大纲 一般来说对于一次晋升PPT或者是汇报的PPT都是一次体系化的思考过程，这个过程需要自顶向下的去思考，这时候不要陷入细节，比如我的架构图怎么画，用什么样式会比较好，要不要加个动画？这些都是无足轻重的。
我的思路是首先有大的框架，比如我的转正PPT，我的逻辑是这样的：
 开场  自我介绍 之前做的事情的简要介绍   对现在业务的理解 我入职之后做的事情  事情一 事情二   我的总结 我的未来规划   观点三：使用大纲，或者思维导图将自己的想法分层，自顶向下
 填充分支 这一块我直接举我的几个例子：
 自我介绍  如何精炼的介绍我自己，还能印象深刻呢？我的想法是使用标签云，给自己打标，制作标签云   现有业务的理解  找出关键业务，画图   入职之后做的事情，这个很关键，我是分为5部分来阐述的我做的事情的  背景&amp;amp;问题 挑战 解决方案 成果 项目总结     观点四：不要过早陷入细节</description>
    </item>
    
    <item>
      <title>生活的小TIPS</title>
      <link>https://blog.sailfishc.cn/life/life-tip/</link>
      <pubDate>Tue, 16 Jun 2020 16:43:26 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/life/life-tip/</guid>
      <description>前言 回想起几年前自己想要坚持下来的事情，现在还是这样，如果每周做两道算法题，现在也算是算法大牛了吧，生活中总有一些事情偷偷溜走，这次手上起了一些小泡，记得之前有找医生看过，但是现在又忘了，所以相信时间的力量，将这些小的TIPS记录下来，以后翻看，也能有些许收获。
湿疹 最近手上起了一些红点点，比较痒，突然起来，过一会又下去了，之前其实有出现过，只是自己也没有注意，这次我咨询了一下医生，医生建议使用派瑞松就可以，我又查了一下相关的资料，发现了湿疹的一些知识
 湿疹是是一种过敏反应，处于机体的自我保护 湿疹不是太湿了，而是太干 湿疹不能捂着 湿疹不能立即治愈，治疗湿疹是一个长期工作   治疗方案
  使用一些低敏的保湿乳肤霜即可，然后大量涂抹，常见的有  凡士林 协和硅霜 丝塔芙/雅漾的一些护手霜 儿童使用的郁美净    参考资料  宝宝湿疹怎么办？我终于治好了我宝宝的湿疹！ - 知乎 好好「吃药」：盘点那些你所忽视的家庭用药误区  </description>
    </item>
    
    <item>
      <title>利用Telegram订阅RSS</title>
      <link>https://blog.sailfishc.cn/posts/2020/06/%E5%88%A9%E7%94%A8telegram%E8%AE%A2%E9%98%85rss/</link>
      <pubDate>Sun, 14 Jun 2020 21:16:05 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/2020/06/%E5%88%A9%E7%94%A8telegram%E8%AE%A2%E9%98%85rss/</guid>
      <description>订阅优质的博客资源是学习精进的好方法，RSS是达成这一目的一个好工具。
 之前一直在用的是Feedly，但是用着用着Feedly打开的频率越来越低了，后来看到木子在用Telegram做了RSS，我也就比较趋向于这种方式了，这篇文章就不介绍RSS的一些概念了，就直接开始展示工作流以及如何使用吧，奥利给！
基础流程  其中带颜色的是需要自己部署的   流程分析
  在TG上新建一个Bot 将Bot加入自己的Channel或者是Group中 部署一个RSS服务 在Bot中输入想要订阅的网站订阅 TG服务器收到消息 RSS服务监听TG服务器消息，当你在TG客户端的Bot中加入了想要订阅的网站后，RSS服务是能得到信息的 RSS服务每5分钟抓取一次目标网站，看是否有更新 如果有更新，则使用TG的OpenAPI给所在的Channel或者Group推送消息  搭建服务 准备Bot  @BotFather，使用/start 输入Bot的name和userName BotFather会返回这个Bot的Token，一般是数字：字母，Token是极其重要的，是和TG的OpenAPI做交互的唯一凭证  将Bot加入Channel或者  将Bot作为Admin加入自己的Channel或者Group   测试Bot，获取Chat信息（不是必要操作），具体可以参考Telegram Bot - how to get a group chat id? - Stack Overflow
  按照这个格式输入到浏览器：https://api.telegram.org/bot${token}/getUpdates，例如：https://api.telegram.org/bot12036334:A2zvFH8VYZ/getUpdates 还可以按照这个格式以Bot的名义发送消息：https://api.telegram.org/bot${token}/sendMessage?chat_id=${chat_id}&amp;amp;text=hello  部署RSS服务  必要条件
  会使用Docker 有一台科学上网的VPS 有公网IP  在看了下RSS服务之后，有两个还不错的
 GitHub - fengkx/NodeRSSBot: Another Telegram RSSBot but in Node.</description>
    </item>
    
    <item>
      <title>大胆的谈谈性</title>
      <link>https://blog.sailfishc.cn/life/right-sex/</link>
      <pubDate>Fri, 27 Mar 2020 22:47:08 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/life/right-sex/</guid>
      <description>这篇文章写了要不要发出来其实还是蛮纠结的😖，还是有些想说的不知道如何表述，也有点担心发出来之后大家会如何看待我
 墙内墙外对于性完全是两种景观，朋友圈如果出现Twitter上这种尺度的照片或者话题，那他可能是疯了，但是在Twitter上这种事情好像是很平常的一件事情，她们把自己的Twitter亲切的定位为黄推，半黄推，即使她们还在国内，让我想起了自己对于性的认知，我也谈谈我对性的看法。
自己生活在一个比较保守的环境中，爸妈以及身边的人对于性这件事情的看法也是比较羞耻的，但是身体是不会骗人的，随着年龄的增大，身体不断发育，已经会有生理反应了，女生可能更早一点，记得在初中的时候学习会组织勤工俭学，有些女生来例假了，老师会让我们帮着女生干活，那个时候可能很多女生也没有基本的生理知识，没有准备，第一次例假会搞得很尴尬，有些女生以为自己得了什么大病，好像就这样了。
对于身体上的变化，那就是男生出现了喉结，有了阴毛，女生的变化是胸部发育，开始周期性的例假。初中的厕所也设计的挺有意思，那时候北方使用的是旱厕，厕所里边没有隔断，就是会有3个厕所，一个是女生和女老师的厕所，一个是男生厕所，一个是男教师的厕所，现在也没理解为什么当时要这么设计，如果是为了避免尴尬，那么女生和女教师为啥共用的一个厕所。那时候对于性的无知往往会造成一些对其他人的伤害，在看知乎问题的时候，有一个问题是胸大造成了什么困扰，很多女生的回答是在初中或者高中的时候被其他女生和男生起一些不太文明的绰号，对于当时的女生来说应该造成了不小的心理负担。
 你想把一切的一切 都找个地方给射了
射在墙上 床上 姑娘的肚子上
— 宋冬野 《梦遗少年》
 宋冬野的这首歌描绘了一个青春期男生的行为，青春期充满了荷尔蒙，不管平时如何克制，但是思想中总是充满了性幻想，矛盾的是，青春期的恋爱又是憧憬而单纯的，并没有很多想法，只有现在想起来还有点想笑的海誓山盟。从青春期到变成一个成年人的过程中，很大一部分人的性是压抑的，我在初中的时候，给一个隔壁的哥哥装系统，在装系统的过程中发现了暴风影音里边有一些成人视频的观看记录，哥哥的媳妇看到了也不好意思，就说也不知道那个哥哥电脑有啥乱七八糟的，当时我不理解结婚了为啥还要看成人视频。
可能没有经过正确的性教育，青春期就会出现一边对于爱情有很高的憧憬，但是另一边大脑中又会有极度下流的想法，那时候，看着聊斋，看到里边的一些场景，自己也会开始遐想，记得第一次出现了梦遗，觉得世界都是美好的，怪不得很多人很早就开始自慰了，我还是发育太晚了，女生什么时候开始的我就不太清楚了😁。
有对象之后开始注意两人之间的关系，《亲密关系》这本书里边有性爱的一章，对我的影响比较大，我倡议大家都多了解一下性，正确的对待它，认真的认识它，作为成年人，不要羞于谈性，不要神化它，也不要污名化它，它承载了生活中莫大的欢愉，也承载了生命的延续，正确的认识性，无他，一是让自己开心，二是如果有了子女，不要让他们再做和你青春期一样无知的事情，告诉他，处对象了，记得戴套。
前段时间Twitter上有一个教女上位的视频比较火，我发现包括我在内，对于性爱这件事情知之甚少，其实性爱这件事情也是需要学习的，在驴得水那部电影里边，张一曼为了学校的事情献身铜匠，铜匠从来没有体会过其他的体位，有好的性爱体验，对于生活质量的提升是巨大的，我搜索了下相关资源，Twitter那个没有找到系列的视频，但是找到了一些还不错的，推荐两个：
 李熙墨系列 亚当德永《柔软爱的宝典》   生活的一切都和性有关，除了性本身。性关乎权力
 本来不想说这个的，但是这句话太经典了，因为一旦出现什么大学教授XXX，某银行行长XXX，都会有人发这段文字，对于两性的亲密关系来说，我希望这句话是不存在的，对于性，如果扯入政治，金钱，就不是我想表达的了，我想聊的是性,不是黄色，生活，不只是性，最重要的是爱❤️，希望大家都能有美好的生活，有一个爱的人，也有一个爱你的人。</description>
    </item>
    
    <item>
      <title>经济机器是如何运行的</title>
      <link>https://blog.sailfishc.cn/life/economic/</link>
      <pubDate>Fri, 27 Mar 2020 21:27:36 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/life/economic/</guid>
      <description>这篇博客主要是对视频的整理，没有原创内容，主要是认为这个视频讲的太好，做个整理
 涉及的名词 经济主体  个人 企业 银行 政府&amp;amp;央行  经济名词  交易 信贷 债务 通货膨胀 通货紧缩 去杠杆化 短期债务周期 长期债务周期  主要的经济动力  生产率的提高 短期债务周期 长期债务周期  交易 在每次交易中，买方使用货币或信用 向卖方交换商品、服务或金融资产，信用在使用时和货币一样 因此，把花费的货币和信用加在一起，就可以得出支出总额，支出总额是经济的驱动力 ，交易是经济机器最基本零件 所有经济周期和动力都是交易造成的。
央行控制着经济中的货币和信贷数量 因此不同于其他买方和卖方，央行通过影响利率和发行更多货币来实行这种控制
信贷 信贷是经济中最重要的组成部分，但也许是人们最不了解的部分，它之所以最重要，是因为它是经济中最大且最为变幻莫测的一部分，贷款人希望自己的钱生出更多的钱 而借款人则想购买当前无法负担的某种东西，借贷可以同时满足贷款人和借款人的需要，借款人保证偿还借款，称为本金，并支付额外的款额，称为利息。
利率高时，借贷就会减少，原因是贷款变得昂贵 当利率低时，借贷就会增加，原因是贷款变得便宜，如果借款人保证偿还债务，而且贷款人相信这一承诺 信贷就产生了，信贷一旦产生，立即成为债务，债务是贷款人的资产，是借款人的负债 等到借款人今后偿还了贷款并支付了利息，这些资产和负债将消失，那么为什么信贷如此重要？ 这是因为，借款人一旦获得信贷，便可以增加自己的支出，贷款人可以放心地把钱借给他们 所以，收入增加使得借贷也增加，从而能够增加支出，如果某人的收入增加，其信用度就会提高，贷款人就更愿意把钱借给他。
信用良好的借款人具备两个条件：偿还能力和抵押物，贷款人可以放心地把钱借给他们 所以，收入增加使得借贷也增加，从而能够增加支出，由于一个人的支出是另一个人的收入 这将导致借贷进一步增加，并不断循环，这一自我驱动的模式导致经济增长，也正是因为如此，才产生了经济周期，我们的知识随时间而逐渐增多，知识的积累会提高我们的生活水平 我们将此称为生产率的提高，生产率在长期内最关键，但信贷在短期内最重要，因为生产率的提高不会剧烈波动，因此不是经济起伏的一个重要动力，但是债务是这种动力，因为我们能够通过借债让消费超过产出 但是在还债时不得不让消费低于产出
债务量的波动有两大周期 其中一个周期持续大约5年至8年，另一个持续大约75年至100年，大部分人虽然能感受到波动，但由于离波动太近 每天、每周都身临其境，通常并不认为这是周期
如果没有信贷 想象一个没有信贷的经济运行，在这样的经济运行中，增加支出的唯一办法是增加收入 因此需要提高生产率和工作量，提高生产率是经济增长的唯一途径，由于我的支出是另一个人的收入，当我或者另一个人提高生产率的时候，经济就会增长，借债不过是提前消费 为了购买现在买不起的东西，你的支出必然超过收入，你给自己设定了一个未来的时间 到那个时候，你的支出必须少于收入，以便偿还债务，这样马上就形成了一个周期，信贷触发了一系列机械和可以预料的、将在未来发生的事件
信贷的规模 现实生活中，大部分所谓的钱实际上是信贷 美国国内的信贷总额大约为50万亿美元，而货币总额只有大约3万亿美元，有信贷的经济运行能增加支出，使得收入的增长速度在短期内超过生产率的增长，但在长期内并非如此
通货膨胀 如果支出和收入的增长速度超过所出售的商品的生产速度，价格就会上涨，把价格的上涨称为通货膨胀，央行不希望通货膨胀过高 因为这会导致许多问题，央行在看到价格上涨时就会提高利率，随着利率的上升，有能力借钱的人会减少，同时现有债务成本也会上升，由于人们减少借债，还款额度增长 剩下来用于支出的资金将减少，因此支出速度放慢，而由于一个人的支出是另一个人的收入 环环相扣，人们的收入将下降
通货紧缩 由于支出减少，价格将下跌 我们称之为通货紧缩，经济活动减少，经济便进入衰退，如果衰退过于严重，而且通货膨胀不再成为问题 央行将降低利率，使经济活动重新加速，随着利率降低，偿债成本下降 借债和支出增加，出现另一次经济扩张</description>
    </item>
    
    <item>
      <title>LeetCode 21. Merge Two Sorted Lists</title>
      <link>https://blog.sailfishc.cn/algorithm/leetcode-21/</link>
      <pubDate>Thu, 26 Mar 2020 23:00:40 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/algorithm/leetcode-21/</guid>
      <description>题目解读 Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists. Example: Input: 1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4 Output: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4  注意事项
  两个链表都是有序的  思考路径 第一遍思路  我是在Educative上做的题目，题目的原始代码结构对我有一定的误区，因为他的题目结构是这样的：
 public static LinkedListNode mergeSorted(LinkedListNode head1, LinkedListNode head2) { //TODO: Write - Your - Code return head1; } 已经指定了必须返回head1,基于这个设定，我的思路如下：
 比较head1和head2的第一个值，如果head1.val小于head2.val，那么head1和head2交换 设置node1和node2，分别赋值为head1和head2 这个时候我思考了几个case：  当node1 &amp;lt;= node2 &amp;lt;= node.</description>
    </item>
    
    <item>
      <title>LeetCode 283. Move Zeroes</title>
      <link>https://blog.sailfishc.cn/algorithm/leetcode283-movezeros/</link>
      <pubDate>Thu, 26 Mar 2020 13:55:37 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/algorithm/leetcode283-movezeros/</guid>
      <description>题目解读 Given an array nums, write a function to move all 0&#39;s to the end of it while maintaining the relative order of the non-zero elements. Example: Input: [0,1,0,3,12] Output: [1,3,12,0,0] Note: 1. You must do this in-place without making a copy of the array. 2. Minimize the total number of operations.  注意点：
  维持数组的相对顺序，也就是不能改变非0元素的相对顺序 不使用新的数组 最少的操作数（操作数指的是对数组的赋值操作）  思路  这道题难度是easy，思路也比较简单，有点类似快慢指针的做法
  定义一个索引nonZero（慢指针），定义为在[0, nonZero]的元素都是符合条件的 遍历数组，索引下标为index（快指针） 如果index对应的值不等于0，则将index的值赋值给nonZero索引，将index和nonZero索引向后移动 如果index对应的值等于0，则只移动index的值 直到index遍历结束 这个时候nonZero的之前的元素已经是数组中全部不为0的数了，只需要把(nonZero, 数组长度)的值赋值为0即可  代码 public void moveZeroes(int[] nums) { if (nums == null || nums.</description>
    </item>
    
    <item>
      <title>工作四年的一些思考</title>
      <link>https://blog.sailfishc.cn/posts/2020/03/%E5%B7%A5%E4%BD%9C%E5%9B%9B%E5%B9%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</link>
      <pubDate>Wed, 25 Mar 2020 14:59:49 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/2020/03/%E5%B7%A5%E4%BD%9C%E5%9B%9B%E5%B9%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</guid>
      <description>写在之前 16年毕业，工作快4年，就职了2家公司，感受过稳定发展，也感受过中型公司无尽的会议和创业公司在寻求业务发展和技术快速实现的矛盾，今天是在公司的最后一天，偷得一日闲，回顾下自己毕业之后这几年工作的一些经历和感悟。
毕业 第一阶段 二本毕业，基本上毕业就失业，但好在大三的时候自己一个人从兰州跑到北京来学习了一段时间，因为这个事情，从预备党员降级为了团员💔，大四的时候又从兰州到北京，开始找工作，面试蛮不顺利的，差不多面了一周多，面了有5家公司，因为还没毕业，也没有好的学校背景，技术也很一般，只有最后一家公司给了Offer，这是一家做电商的公司，公司的主要业务在线下的门店，线上的交易比较少，所以工作上也没有太多挑战，一块入职的几个同事都是刚毕业的，在公司里，有种还在上学的错觉，大家遇到问题一块讨论，工作强度也不大，有大量的时间去学习，但是对于刚毕业的我来说，可以接触到的资源还是太少，公司也没有技术实力比较强的人指导，自己当时是属于百度+知乎+CSDN+简书派程序员，除了看书就是刷刷视频学习学习，那段时间下来，感觉自己知道的特别多，后来也意识到在深度上差太多，有时候自己知道自己哪里有问题，但是不容易迫使自己去改变，在第一家公司工作了一年多，后来觉得自己在这边的环境下不能再成长太多了，有了萌生换一份工作的想法。
第二阶段 这次面试其实还是蛮顺利的，只面了京东，易宝支付和链家，拿到了两个Offer，链家面试官挺好的，但是技术还是达不到他们的要求，最终去了易宝支付，在易宝支付开始了新的职业生涯。
新的工作还是比较有挑战的，在这边主要处理的是资金相关的系统，每天交易流水都比较大，因为负责的系统不是一个快速迭代的系统，已经进入了维护阶段，开发的工作量也不是很大。在这份工作中，自己开始了正式的互联网研发流程（是的，第一家公司的不算正规的研发流程），这时候的我，对于维护的系统上线是很恐慌的状态，我认真的对待自己的代码，也努力的去熟悉以前的代码，深刻的认识着遗留代码的恶臭味，太多的魔法值，不规范的异常处理，关键的流程中没有日志，混杂着不同的远程调用协议，数据库索引不正确的设置，定制化逻辑，对于NULL和””不合理应用，NPE问题，超长的函数，超级大的类，不知道什么意思的配置文件，巨多的定时任务，不完善的UnitTest，经过好几年产品也搞不清楚的业务逻辑，都充斥在这个系统中，当时对于这些，我浑然不知。每次调整代码上线都比较紧张，即便是测试通过了，但是到线上也可能会出现一些莫名其妙的问题，这也就是所谓的泥潭吧，这段时间里，我的技术能力感觉没有提升，唯一提升的就是胆子变大了。
由于组织架构调整，2017年年底部门独立为一个子公司，我们开始创业了，作为第一批员工，赋予了新的意义，那就是要做成一件事情，因为有了公司期权了，老板想着要上市，干劲十足。
第三阶段 这份工作经历，从2017年年底到今天差不多2年3个月的时间，深刻的体会到了创业的困难程度，作为一个创业公司，算是比较幸福的，因为有盈利的业务，在第一年没有为钱担心过，但是公司得有新的血液注入，开始做起了新的产品，快速的产品迭代，不断的添加新的功能，做不完的需求，写不完的代码，时间快速的过去了365天，好像，做了一年了，做的产品在市场激起一朵浪花，是的，一朵也没有，第二年总结会上总结第一年的失败是由于没有及时的做市场推广导致的，开始了扩招销售的策略，当然，功能是不可能停止的，开发是不可能停止的，又过去了365天，依然，没有激起浪花，这就是创业的残忍之处，付出了两年青春，事情还是没有做成，早已不说上市走向认识巅峰，重要的是活下来，这期间经过了多次裁员，团队的很多人早已经没有了继续下去的动力，是时候选择离开了。
第四阶段 这两年写了很多代码，对于需求可以多快好省的完成，但是作为一个有追求的程序员，要抛下诗和远方，去休福报了。
感悟  前面说了这么多，开始聊聊自己这几年的一些感悟吧！
 时间成本  李永乐老师的科普视频中有一个例子：一年120的爱奇艺会员要不要买？
 这给问题可以用数学来计算一下：
 假如我是一个程序员，一天工作8小时，一个月上班22天（当然这些时间作为程序员都是不可能的），那么你一个月的工时就是：176小时，假设工资一个月为17600，那么时薪就是100元。 假如你每天看两个视频，一个视频广告时间为60s，那么一天是2分钟，一个月就是60分钟  如果不开会员，你就浪费了1个小时的时间来看广告了，你的时薪是100元，一个月的会员费为10元，很明显，你是开一个会员比较划算的。
这个思考对我影响很大，那就是对自己的时间有一个金钱衡量的方式，自己在做一些事情的时候可以有一个标准，哪些事情是值得做的，哪些是不值得做的。之前做的很多事情都是没有价值的，比如费时间去找一些破解的软件和视频，还不如多花点时间提升自己。
提升自己的技术深度  他问，“如果用5年的时间学习数据库，你能不能成为这个领域的专家？”
我说，“应该可以吧”
他说，“你现在25，5年后也才30，30岁就能成为某个领域的专家，为什么不去做呢？你看看周围有多少30岁的人还一事无成，而那个时候的你已经是数据库专家了。”
 这是我看的一篇公众号文章的一部分内容，对我也是有一些启发意义的，我知道自己的问题是喜欢看很多东西，但是没有深入的钻研，所以现在还是一个差不多先生，没有特别精通的一部分内容，多给自己一些时间去做一件事情，也许在一段时间内，你不知道微服务，你不知道Python有多火，但是如果坚持一件事情深度的去钻研，我相信，用不了几年时间，会比身边的人强很多，这个建议给你，也给我。
有效的学习，而不是为了学习而学习 在朋友圈经常会看到一些内容，刚看完极客时间的一个专栏文章，在朋友圈发了一小部分总结：
  主从原理：主库通过同步binlog到从库，relaylog去读 从库有延迟可以通过缓存，冗余数据解决 XXX   如果只是这种总结的话， 没什么作用，学习如何学习真的是一门长期探索的事情，不要只会看书做笔记，看视频写笔记，笔记写了很多，但是遇到需要的时候还是不知道如何去做，有一个例子是前两年得到的讲认知的一门课程，教你如何读书，但是你学习了之后还是不会按照他的学习方法去做。
这里推荐几个学习资源：
 Learning How to Learn: Powerful mental tools to … - Coursera 费曼学习法 学习金字塔  留出10%的时间去探索 拿出10%的时间用来探索未来，可以去找一些奇淫技巧，找一些提升自己效率的软件，寻求一些可以用来学习的网站，就像Google给员工20%的时间自己创作一样，给自己10%的事情去做一些探索未来的事情。
算法和英语 先进的技术，优质的资源，英语占了很大一部分，李笑来是一个很典型的例子，早期接触比特币，之后的事情大家都知道了。
算法能力是大厂的敲门砖，也可以改变自己的思维方式，只强调一点，不要为了刷题而刷题。
头脑预演  举个亲身例子，很多人都有用线程的经验，可是有多少人知道线程的本质是什么？有多少人在头脑里有一幅画面，显示出多线程程序的各种动态特征？其实很少有人知道。这就是为什么很多人过度的使用线程并发，结果产生各种同步问题，竞争状态（race condition），死锁等现象。某公司的一片多线程代码，号称是“有非常多并发程序经验”的程序员写的。结果没多久我就发现里面其实含有非常微妙的竞争情况，会在非常小的概率随机发作。</description>
    </item>
    
    <item>
      <title>常用的生产力工具</title>
      <link>https://blog.sailfishc.cn/posts/2020/03/%E5%B8%B8%E7%94%A8%E7%9A%84%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 25 Mar 2020 10:28:14 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/2020/03/%E5%B8%B8%E7%94%A8%E7%9A%84%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7/</guid>
      <description>比较喜欢收集信息，对于APP也会找各种各样的去尝试（不太符合极简风格），从Mac，手机，IPad和Chrome Extension都挺多的，这里的包含了大部分的应用，作为记录。
 Mac  1Password 7 AdGuard Affinity Designer Affinity Photo AirServer Alfred 3 Anki Bear calibre Charles CheatSheet ClashX CloudMounter Dash Docker Drafts Dropbox Eagle Emacs Evernote feedly Figma Firefox GitKraken Google Chrome HandShaker Hidden Bar IINA iStat Menus iTerm JetBrains Toolbox JustFocus Kap Kawa Kindle MacUpdater Magnet mat Microsoft To Do MindNode Neat Reader NeatDownloadManager Notion OmniGraffle OneDrive PicGo Pliim Postman ScreenFlow Setapp Slack Spotify Station Studio 3T Surge Telegram Lite Typora uPic Visual Studio Code Wireshark zoom.</description>
    </item>
    
  </channel>
</rss>
