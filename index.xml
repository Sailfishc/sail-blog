<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>橙小张的博客</title>
    <link>https://blog.sailfishc.cn/</link>
    <description>Recent content on 橙小张的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 Oct 2019 15:05:56 +0800</lastBuildDate>
    
	<atom:link href="https://blog.sailfishc.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>通过Hugo&#43;Github快速搭建博客</title>
      <link>https://blog.sailfishc.cn/posts/deploy_blog_to_hugo/</link>
      <pubDate>Thu, 24 Oct 2019 15:05:56 +0800</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/deploy_blog_to_hugo/</guid>
      <description>写在前面
 程序员总想有自己的一个博客，厌倦了CSDN，简书，掘金这些博客网站，那就自己搭建一个吧，这篇文章包含了从0开始搭建到部署，可以没有自己的域名，自己的服务器，但是面包总会有的。
先罗列下常见的博客网站：
 Hexo WordPress JekyII Ghost Hugo  Hexo是我之前用的博客网站，但是在使用过程中遇到了一些问题：
 node环境问题较多，本身对Node不熟悉，解决成本高 node_modules过大，网络问题下载依赖过慢 编译为html过程越来越慢  后来发现了Hugo，发现Github已经3w多star了，Hugo官网对于Hugo的介绍是：The world’s fastest framework for building websites，总结起来就一句话，那就是快！！！
快速开始  Quick Start | Hugo  Hugo安装很简单，就以Mac为例快速开始：
 安装Hugo：brew install Hugo 查看Hugo版本：Hugo version 新建一个网站，名字为quickstart：Hugo new site quickstart 安装主题  进入目录：cd quickstart 使用Git Init创建Git仓库：git init 下载主题，放入theme目录（名字为ananke）：git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke 使用主题：echo ‘theme = “ananke”’ &amp;gt;&amp;gt; config.toml  新建MarkDown文章（也可以用现有的放入content/posts目录）：Hugo new posts/my-first-post.md 本地预览：Hugo server -D 打开浏览器：http://localhost:1313 搞定🌹  部署 本地搭建好了网站要部署到外部服务上，常见的方式有三种：</description>
    </item>
    
    <item>
      <title>以练代学，学习算法和数据结构</title>
      <link>https://blog.sailfishc.cn/posts/learn_leetcode/</link>
      <pubDate>Tue, 22 Oct 2019 17:37:00 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/learn_leetcode/</guid>
      <description>数据结构和算法的学习总是一条漫长而艰辛的道路，做题是一条学习数据结构和算法的捷径，之前自己零零碎碎的刷了一些LeetCode的题，但是效果并不好，后来吸取了一些刷题人的经验，结合自己对于语言知识和数据结构及算法的掌握程度，总结了自己的一套刷题方式。
首先是对自己的定位，熟悉Java语言，对于常用的数据结构比较熟悉，算法较弱，目标是在较短的时间去熟练掌握数据结构和算法，基于这几点，不能走常规的学习路径（如果在校或者是时间比较充裕可以参考）：
 算法导论 数据结构与算法分析 配合LeetCode或者OJ来练习   我的学习计划是这样的（以练代学）：
  寻找LeetCode的Java版最优解实现（至少400题） 将数据结构和算法进行分类（目录见后文） 寻找可以快速熟悉的视频资源（极客时间的算法面试40讲就挺好） 按分类将LeetCode的题目归类，附上题号，LeetCode题目链接，题目难度分类，最优解地址（Github地址），自己的解法地址   具体是这样做的（第一遍）
  先跟着视频学习（例如数组，链表作为一个阶段，去了解理论基础，及几道经典题型解读） 从分类中找出要练习的LeetCode题目 深度思考10分钟去寻找思路 有思路的话写代码，对比最优解 没有思路直接看答案（最好有视频讲解），理解题目解题思路 自己重新做一遍   第二遍刷题（基本同第一遍步骤）
数据结构和算法分类
  数据结构  栈 队列 表  数组 单链表 双链表 循环链表 散列表  二叉树  平衡二叉树 红黑树 哈弗曼树 堆  多叉树  B，B+Tree 字典树  图  有向图 无向图 权图   算法  算法思想  分治 动态规划 贪心 回溯 分支界定  复杂度  时间复杂度 空间复杂度  字符串匹配  BF算法 BM算法 Sunday算法 KMP算法 Tire树  排序  插入排序  希尔 直插  交换排序  冒泡 快排（重点）  选择排序  简单排序 堆排序（重点）  归并排序 基数排序  查找  二分查找 二叉排序树 B数 Hash BloomFilter    </description>
    </item>
    
    <item>
      <title>长期关注的一些博客</title>
      <link>https://blog.sailfishc.cn/posts/blog-star/</link>
      <pubDate>Tue, 22 Oct 2019 16:51:04 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/blog-star/</guid>
      <description> 酷壳 – CoolShell.cn  </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://blog.sailfishc.cn/about/</link>
      <pubDate>Sat, 19 Jan 2019 02:42:30 +0100</pubDate>
      
      <guid>https://blog.sailfishc.cn/about/</guid>
      <description> 橙子
 </description>
    </item>
    
    <item>
      <title>2018年总结</title>
      <link>https://blog.sailfishc.cn/posts/2018%E5%B9%B4%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 13 Jan 2019 17:37:00 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/2018%E5%B9%B4%E6%80%BB%E7%BB%93/</guid>
      <description> 2019年很多人都开始写自己的2018年的总结，虽然已经13号了，但是还是要总结下自己的2018，回头一想，一年过得还真快，2018年加入了创业公司，一年竟也过去了，在这一年里面，也没有做出什么成绩，但是还是有点收获，也总结分享一下。
工作  2018年由于一些特殊原因，部门成立了子公司，从零开始，也算是自己第一次加入创业公司
 虽然是换了一家公司，但是身边的小伙伴还是那些，所以并没感到有多大的变化，前几个月该怎么做就怎么做，之后渐渐感到了业务上的压力，创业维艰，伴随着的就是加班多了，迭代快了，要参与到业务中去思考产品的方向了，对于自己来说，自己的职责变了一点，感觉从大公司的螺丝钉找到了一些归属感。这一年，有的老同事离职了，也有新同事进来，自己也开始带人了，虽然不多，但也是要去改变一些工作方式了。
产品迭代 那些日子，每次上线一个版本之后，大家都去喝酒撸串，尽兴的玩。开发之前骂着产品这么多需求，但是产品上线的时候还是开心的。在公司总结上，我还是觉得团队的战斗力没有比一年前变得更强，只是有部分人的能力变强了，
研发 得益于之前公司的基础建设，还是有一些基础储备，项目在RPC，ZK，Cache，监控，构建部署，MQ，DB维护上还是没怎么费力，大家更多的还是专注于业务，但是前期没有一个好的架构师来规划项目架构，以及开发人员的认知能力和业务迭代的紧迫性，导致项目还是有很多问题：
 技术债：虽然很多代码是新写的，但是业务速度和人员水平，还是存在很多技术债 直接搬用了母公司的技术栈，虽然少了很多维护成本，但是技术选型没有选用最新最成熟的解决方案，生产力还是有点欠缺  企业文化 可能由于之前两家公司的关系，对于企业文化来说没什么感觉，就像大学的校训，只是在某些场合有仪式感的说出来，但是在创业公司，企业文化是对产品是有指导作用的，在某些时候，想不出该做什么，老板就要求从企业文化中去创新，一个公司的一些文化还是深深的影响着一些人，他就像人的价值观和人生观一样，应该是牢牢铭记在心中的，这也就是创业公司的迷人之处吧，因为参与程度高，所以会将自己的价值观注入到公司的文化中。
生活 找到了对的人 啥也不说了，找到了对的人，是今年最大的收获
养了只狗 名字叫格林，一只拆家的柯基
技术成长  更多的去思考如何去学习
 我觉得大部分程序员有三个阶段：
 普通程序员 工程师 架构师  普通程序员 普通程序员是占有了80%的人，只关注于实现功能
工程师 去思考程序的可读性，可维护性和健壮性，思考如何高效
架构师 去挑战不可能的事情，尝试设计更高级的技术，更灵活的系统
2018年的好书  心理学 整洁架构 极客时间的部分专栏 DDIA 函数式编程思维 修改代码的艺术 有效的单元测试 如何阅读一本书  </description>
    </item>
    
    <item>
      <title>那些书本中没告诉你的MyBatis</title>
      <link>https://blog.sailfishc.cn/posts/mybatis/</link>
      <pubDate>Mon, 07 Jan 2019 21:37:00 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/mybatis/</guid>
      <description>不管是《MyBatis从入门到精通》，还是21天精通MyBatis，都告诉了你怎么做？但是没告诉你为什么以及是什么。
&amp;gt; 本篇将会讲解MyBatis（Spring-MyBatis）的一些关键类，以及关于DB操作的内容
关键类  SqlSessionFactory SqlSessionFactoryBean SqlSession MapperFactoryBean SqlSessionDaoSupport SqlSessionTemplate MapperScannerConfigurer  如何访问数据库 mysql -uadmin -pxxx -h58.87.87.129 -P32007
当我们需要连接MySQL时，需要用到几个属性：
 用户名 密码 地址 端口  这在MySQL中叫一次会话（session），在JDBC中JDBC定义了规范，其实现类具体去操作，在MyBatis中，MyBatis的关键类SqlSession定义了如何去操作数据库，例如：
 selectOne selectAll selectList insert …..  具体的实现类有：
 DefaultSqlSession SqlSessionTemplate SqlSessionManager  当然我们都不会直接使用这几个实现类，我们一般是这样的：
public class UserService { @Resource private UserMapper userMapper; }  那这其中究竟是怎么做到这样简化的呢？
实现细节 SqlSessionFactoryBean&amp;amp;SqlSessionFactory 上面介绍了关键类SqlSession, 那如何创建SqlSession呢？MyBatis使用了工厂方法来创建SqlSession，由于工厂和SqlSession是一对多的关系，也就是说一个Factory可以创建多个SqlSession，MyBatis-Spring将SqlSessionFactory放入了容器的生命周期中，也就出现了SqlSessionFactoryBean，我们一般这样配置：
&amp;lt;bean id=&amp;quot;sqlSessionFactory&amp;quot; class=&amp;quot;org.mybatis.spring.SqlSessionFactoryBean&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot; /&amp;gt; &amp;lt;/bean&amp;gt;   DataSource（必须配置）： SqlSessionFactory 需要一个（也可以是多个） DataSource  MapperFactoryBean 大家都知道MyBatis是基于Mapper的，一般情况MyBatis的一个Mapper就对应一张DB的Table，就有了</description>
    </item>
    
    <item>
      <title>致生活</title>
      <link>https://blog.sailfishc.cn/posts/to_liive/</link>
      <pubDate>Sun, 02 Sep 2018 11:37:00 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/to_liive/</guid>
      <description> 少年真正成人的那一刻，大概就是，对于你的家人，你会时不时惦记，想念，渴望从他们那里得到抚慰，害怕他们哪天离开人世——他们成为你梦境的常客，内心最柔软的部分；你却无比清楚：纵然爱他们，却再无法同他们心无芥蒂地谈论，或长久地生活在一起。 — 一个
 今天送妈妈去火车站回家了，过来的时间不长不短，来去10天，期间工作比较忙，只有周末有时间出去逛，没去几个地方，只去了故宫、颐和园、森林公园、鸟巢、前门、天安门，这是过年回家之后第一次见我妈，来北京以后基本每年就回一趟家，这次我妈在我的坚持下过来，我就规划着带她吃点好的，买几件衣服，带她逛逛。
去车站接她的时候，她穿着一件橘色的衣服，在人群中显得很突兀，在家的时候还没怎么注意，来北京了，突然发现妈妈已经老了，白头发多了些，她在人群中提着一个箱子，面对人群，有一点慌乱，我想着她做了一天火车了，回来休息一下，第二天再出去，她坚持说自己不累，下午就去周边的森林公园逛了逛，晚上在外面吃了点鱼，吃完就说太贵了。
周六和周天带着她逛，我给她教着怎么会使用地图，怎么使用微信支付，怎么坐地铁，之后我说目的地，妈妈打开地图，给我说路线，我跟着她走，想着上班的时候能自己出去走走，其实她来北京最重要的是陪陪我，不在乎去哪，我上班的那几天，等着我回家，加班很晚，回来已经11点多了，妈妈会倒点牛奶或做点汤给我，其实最温暖的，是回家的时候灯是亮着的，屋里有牵挂着你的人。
昨天我问她感觉北京怎么样，她说就是东西贵，赚得多花的也多，你一个人很孤单。
可能是家庭本身的因素，我妈从小就比较严厉，有些感情也不好表达，现在越大了和爸妈也聊得不多了，每次就是问问身体怎么样啊，家里怎么样啊，家里缺啥吗？这次来给妈妈拍照，妈妈就会看看给她拍的怎么样啊，有时候就说笑起来拍出照片不好看，不笑拍出来也不好看-.-
时间过得很快，今天送她回家了，心情有点低落，觉得有点对不起他们，不在他们身边，现在自己赚钱，但是还是给不了他们好的生活，只希望他们身体健康，争取明年带爸妈出去玩。
 自己好久不写这种非技术文章了，今天特别想写，写的有点乱，每个在外边工作的人，可能心里都有一团火。
 </description>
    </item>
    
    <item>
      <title>设计模式总结</title>
      <link>https://blog.sailfishc.cn/posts/learn_design_patterns/</link>
      <pubDate>Wed, 24 May 2017 11:37:00 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/learn_design_patterns/</guid>
      <description>一、创建型模式(五种)  工厂方法模式(Factory)：工厂创建对象（经典实现：很多框架初始化时都会创建一个工厂对象，用来加载资源） 抽象工厂模式(Abstractfactory)：抽象工厂实例创建对象，工厂可修改，灵活度高（经典实现：Struts2插件机制的核心实现就是BeanFactory这个抽象工厂。Spring IOC加载Bean，AOP创建Proxy） 单例模式(Sington)：适用于只需要一个对象的情况（经典实现：Tomcat中StringManager的错误处理机制） 建造者模式(Builder)：一步一步创建一个复杂的对象（经典实现：MyBatis中的SQLSession就是结合了Configure，executor等对象，以此来实现SQLSession的复杂功能） 原型模式(Prototype)：复制对象，包括深度复制和浅度复制，深度复制重建引用对象，浅度复制不创建（经典实现：java序列化）  二、结构型模式(七种)  适配器模式(Adapter)：通过实现接口，依赖注入，继承等方式为不相关的实体建立关系（经典实现：Tomcat新版本连接器Coyote，就是通过为Connector适配建立了ProtocolHandler与Tomcat组件Connector的关联关系） 装饰器模式(Decorator)：创建包装对象修饰扩展被包装对象的功能（经典实现：IO家族中BufferedXxx） 代理模式(Proxy)：通过添加中间代理的方式限制，过滤，修改被代理类的某些行为（经典实现：Spring AOP核心实现，DataSource中为Connection创建代理对象，改变close方法的行为，使其从开始的关闭连接变成将连接还回连接池） 外观模式(Facade)：通过外观的包装，使应用程序只能看到外观对象，而不会看到具体的细节对象。（经典实现：Tomcat中创建外观类包装StandardContext传给Wrapper，创建外观类包装Wrapper以ServletConfiguration的形式传给Servlet，以此来屏蔽不想让Servlet可见的那些Tomcat容器参数） 桥接模式(Bridge)：将抽象部分与它的实现部分分离，使它们都可以独立地变化（经典实现：JDBC驱动） 组合模式(Composite)：部分与整体，常用于表示树形结构 享元模式(Flyweight)：维护资源集合（经典实现：数据库连接池，避免重新开启数据库链接的开销）  三、行为型模式(十一种)  策略模式(Strategy)：定义多个不同的实现类，这些类实现公共接口，通过调用接口调用不同实例得到不同结果（经典实现：Spring中Bean的定义与注入，Controller，Servcie，repository三层架构中只依赖上一层接口） 模板方法模式(Template)：父类定义公共方法，不同子类重写父类抽象方法，得到不同结果（经典实现：Tomcat生命周期中的init，SpringIOC上层类加载具体子类指定的配置文件） 观察者模式(Observer)：目标方法被调用，通知所有观察者（经典实现：Tomcat生命周期事件监听，Spring BeanPostProcessor实现 ） 迭代子模式(Interator)：提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示。（经典实现：集合迭代器） 责任链模式(ChainOfResponsibility)：链式依赖，依次调用（经典实现：Tomcat Valve） 命令模式(Commond)：Action定义具体命令，拦截器Invocation回调执行命令（经典实现：Struts2） 备忘录模式(Memento)：建立原始对象副本，用于存储恢复原始对象数据 状态模式(Stage)：通过改变状态，改变行为（经典实现：切换装载着不同配置信息的配置文件对象） 访问者模式(Visitor)：结构与操作解耦。灵活的操作，放入固定的结构中执行（经典实现：在SpringAOP的实现过程中首先会有一个ProxyCreator去创建切入点，通知之类的，然后创建一个抽象工厂将这些参数对象传递给抽象工厂，抽象工厂调用createAopProxy(this)来创建对象，传入不同的抽象工厂创建出不同的实体对象） 中介者模式(Mediator)：MVC 框架，其中C（控制器）就是 M（模型）和 V（视图）的中介者 解释器模式(Iterpreter)：定义分别定义 + - * / 非终结符，组合不同的非终结符定义不同的表达式，维护繁琐  四、学习资源  调停者模式 解释器模式 访问者模式 状态模式 备忘录模式 命令模式 责任链模式 迭代子模式 观察者模式 模板方法模式 策略模式 不变模式 桥梁模式 门面模式 享元模式 代理模式 装饰模式 合成模式 适配器模式 原型模式 建造模式 单例模式 抽象工厂模式 工厂方法模式 简单工厂模式  五、总结   内容部分引用自http://smallbug-vip.</description>
    </item>
    
    <item>
      <title>浅析RPC</title>
      <link>https://blog.sailfishc.cn/posts/learn_rpc/</link>
      <pubDate>Sat, 29 Apr 2017 14:37:00 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/learn_rpc/</guid>
      <description>目前很多应用应该都不是one in all模式了，避免不了发生远程调用，和同事聊了下RPC之后，发现大家对RPC的概念还是比较模糊的，虽然一直在用，但是不太明白其含义，在知乎上搜了下RPC HTTP这俩个关键词，发现还是有很多误解的。 - 问题一：既然有http 请求，为什么还要用rpc调用？ - 问题二：请问rpc协议和http协议的关系和区别？
之后就萌生了写一篇关于RPC的文章。
 一、RPC的基本概念 RPC，即 Remote Procedure Call（远程过程调用），说得通俗一点就是：调用远程计算机上的服务，就像调用本地服务一样。 RPC的实现包含了两部分，一部分是客户端，一部分是服务端，服务的调用方发送RPC请求到服务提供方，服务提供方根据参数执行方法，响应客户端，一次RPC请求结束。 这篇文章解释的不错：通俗的语言解释什么是 RPC 框架
RPC 可基于 HTTP 或 TCP 协议，Web Service 就是基于 HTTP 协议的 RPC，它具有良好的跨平台性，但其性能却不如基于 TCP 协议的 RPC。会两方面会直接影响 RPC 的性能，一是传输方式，二是序列化。
众所周知，TCP 是传输层协议，HTTP 是应用层协议，而传输层较应用层更加底层，在数据传输方面，越底层越快，因此，在一般情况下，TCP 一定比 HTTP 快。就序列化而言，Java 提供了默认的序列化方式，但在高并发的情况下，这种方式将会带来一些性能上的瓶颈，于是市面上出现了一系列优秀的序列化框架，比如：Protobuf、Kryo、Hessian、Jackson 等，它们可以取代 Java 默认的序列化，从而提供更高效的性能。
针对对象序列化，有各种方式的性能对比，Github地址:
通过对比可知： - Google的Protostuff性能最好 - JSON/XML性能比较差
但是JSON/XML方式在互联网领域应用比较广泛，第三方的解析包也比较容易使用，所以在效率要求不是很高的情况下是一种不错的选择。
dubbo作为一种服务治理框架，RPC作为其中的内部通信方式，使用也是非常简单：
@Component public class CityDubboConsumerService { @Reference(version = &amp;quot;1.0.0&amp;quot;) CityDubboService cityDubboService; public void printCity() { String cityName=&amp;quot;xx&amp;quot;; City city = cityDubboService.</description>
    </item>
    
    <item>
      <title>消息队列之RabbitMQ基础</title>
      <link>https://blog.sailfishc.cn/posts/learn_rabbitmq/</link>
      <pubDate>Sun, 23 Apr 2017 14:37:00 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/learn_rabbitmq/</guid>
      <description>MQ在工作中用途还是比较多的，RabbitMQ又是比较容易上手并且在企业中用的比较多的一种消息服务，本篇文章借鉴于ginobefun的文章和ConanLi的文章，一方面是加深理解，一方面也是补充自己在MQ的不足。
 一、AMQP基础 二、RabbitMQ 基础概念  生产者、消费者 队列 交换器 绑定  生产者、消费者  生产者（producer）创建消息，然后发送到代理服务器（RabbitMQ） 消费者（consumer）连接到代理服务器上，并订阅到队列（queue）上；当消费者接收到消息时，它只得到消息的一部分：有效载荷（标签并没有随有效载荷一同传递） 信道（channel）建立在”真实的”TCP连接内的虚拟连接；不论是发布信息、订阅队列或是接收消息，都是通过信道完成的；不使用TCP连接主要是因为对于操作系统而言建立和销毁TCP会话非常昂贵的开销；在一条TCP连接上创建多少条信道是没有限制的 消息包含两部分：有效载荷（payload）和标签（label）；有效载荷就是你想要传输的数据（可以是任何格式的任何内容）；标签描述了有效载荷，并且RabbitMQ用它来决定谁将获得消息的拷贝（之后举例说明）  队列(queue)  Queue（队列）是RabbitMQ的内部对象，用于存储消息
 主体流程：  队列类似一个broker角色，生产者将内容（消息）发送到队列 队列进行存储，消费者将消息消费 消费者确认消费消息（ack）  生产者和消费者都可以通过来创建队列：
channel.queueDeclare(QUEUE_NAME, durable, exclusive, autoDelete, arguments);   durable：队列名称，不指定则随机生成 exclusive：设置为true则为私有队列，只有当前消费者可以订阅； autoDelete：设置为true时最后一个消费者取消订阅将自动移除队列； arguments：参数   交换器&amp;amp;绑定 RabbitMQ的消息不是直接从生产者发送到队列的，而是要经过交换器然后才可以到达队列： - 生成者把消息发布到交换器上； - 消息最终到达队列，并被消费者接收； - 绑定决定了消息如何从交换器到特定的队列；
四种交换器类型： - fanout：把所有发送到该Exchange的消息路由到所有与它绑定的Queue中 - direct：把消息路由到bindingKey与routingKey完全匹配的Queue中 - topic：把消息路由到bindingKey与routingKey模糊匹配的Queue中 - headers：headers类型的Exchange不依赖于routingKey与bindingKey的匹配规则来路由消息，而是根据发送的消息内容中的headers属性进行匹配
1、fanout  生产者（P）发送到Exchange（X）的所有消息都会路由到图中的两个Queue，并最终被两个消费者（C1与C2）消费。  2、direct  routingKey=”error”发送消息，则会同时路由到Queue1（amqp.gen-S9b…）和Queue2（amqp.gen-Agl…） routingKey=”info”或routingKey=”warning”发送消息，则只会路由到Queue2 以其他routingKey发送消息，则不会路由到这两个Queue中  3、topic  routingKey=”quick.</description>
    </item>
    
    <item>
      <title>38年（转载）</title>
      <link>https://blog.sailfishc.cn/posts/liangbo/</link>
      <pubDate>Fri, 07 Apr 2017 14:37:00 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/liangbo/</guid>
      <description>1979年4月7日的夜里3点，一个卑微的生命诞生了，这个小生命就是我。和当时大多数家庭一样，生活一直非常艰苦。从小开始穿哥哥留下的衣服，终于有一天，我希望买一件新羽绒服，父母推辞了很多次，闹了很多次，终于有一次妈妈下班回家，我堵住大门，不买羽绒服不让进门，但这一次终于迎来了一件新羽绒服，然而这一次仿佛是人生重大的洗礼，我一下子就长大了，从此再也没有闹过什么新衣服，默默穿起来哥哥的旧衣服，背起了旧书包，人生迎来了新的境界，一定要靠自己努力，一定一定要靠自己努力。当时我把所有的玩具赠送给了一个好友，他很奇怪，为什么这些之前珍重的宝贝都不要了，我说我想多看点书，多明白一些道理。
当时家里很小很小，哥哥回到家要学英语，需要一个安静的环境，关起了门，我也无处去，就到处玩，很晚才回家。加上天资平庸，学习成绩并不突出，但也不坏。考大学的时候，亲戚都劝我父母，供两个孩子上大学太辛苦了，不如让我当兵算了，能考上专科的话就读个专科，我就是这样一个不被看好的丑小鸭。
那时我也没什么梦想，也做好了当兵的打算，并填补了材料进行了体检。不想分数还够读专科。直到上了大学，我在内心深处还一直瞧不起自己，什么都不如别人，什么都不敢争取，有喜欢的姑娘，连说话的勇气都没有，也没穿过什么漂亮衣服，长相又傻，可以说自己就把自己当烂仔了。
我读的这个学校，淮海工学院，是一个僻静的远在郊区的学校，一个仿佛与世隔绝的地方，除了读书以外，没有什么不花钱的娱乐。那个时候我认识了一个女孩，非常努力的学习，每天晚上无论我多晚下晚自习，总能看到她。有一次我和同学决定守到一次她下晚自习，并且看看她是不是通宵学习的。我们准备了食品和水，终于守到11点半，这个女孩收拾书包走了，宿舍是10点半熄灯，11点锁大门，我们已经回不去了，只好在自习室憋了一夜，后来才知道这个女孩和宿舍管理员疏通了，可以随时回去。。
有一次她离开的时候，我看了她的笔记和做得习题，我简直难以置信这个世界上会有这样一种学习的方法，于是我就开始跟随她的学习脚步，后来大学时光基本都是看着她的背影过来的，有一次她主动向我问好，我们就认识了，但交流也不多，他有个很不错的男友，经常看到他们幸福的样子。
毕业的时候这个女孩毫无悬念地考研上了南京航空航天大学。我准备2年后符合专科考试资格后也考研，然后就是4年，失败了4次后，选择调剂到南京大学软件学院，从97年开始考试大学，准备考研，历经7年不懈努力，日夜奋斗，迎来了人生第一次胜利。
我想经历过考研的人会理解，备考的过程是非常惨烈的，每个知识点的整理，反复练习不亚于高考，而且是在完全无人监督的情况下，靠着内在的巨大动力完成的考试过程，特别是对我这么个天赋很差的人来说，就更加艰难。
研究生毕业那年是2007年，我在硕士这个圈子算大龄了，找工作很困难，加上之前专科背景，非常非常难，当时几个宿舍一起投西门子，所有人都获得笔试机会，唯独我被排除了，无论多么艰难，我都没有隐瞒过简历，宁可被淘汰，后来在南京投遍所有单位，无一录用，经一个北京朋友介绍，来到北京闯世界，在搜狗打工，然后就是3年。搜狗是我职业生涯的高峰，我的很多技能都是在搜狗学会的，这是一个顽强战斗的团队。
2010年，我又开始人生新的征途，进入了清华大学攻读博士学位，在所有脱产博士中，找不到比我年龄再大的了，我甚至比一个老师年龄还大。克服了很多困难，很多人的嘲笑，走到了博士毕业这一天。这些嘲笑包括没有发表重要论文，一清博士等等。在毕业典礼的时候，我对自己说，虽然我这个博士学位没有公开认可的含金量的东西，但是我做了很多非常有价值的东西，只是没有转化成论文，是的，只是没有转化成论文，我对自己的研究工作是满意的。pullword分词，词库，thuirdb至今还在为公司和很多人创造价值，我想这个世界上也只有我自己能认可自己并不是一个很水很水的博士了。
毕业季，找工作又非常难，那时我已经是36岁的老同志了，即便找到工作也没有北京户口，最大的offer只有50万年薪，也没有更好的选择，和一个同年毕业的博士一起创业，然后又是艰苦奋斗2年至今，公司也没倒闭，发展得不快，但也活着，那天合伙人对我说，我现在真的很热爱自己的工作，我听后很想流泪，我说，其实我也很热爱自己的工作，我们有更伟大的梦想，一起努力吧。
97年读了大学好，我就几乎没什么娱乐了，很多同龄人玩的东西，我都没玩过，看过的电影电视我都没看过，从小至今都不被看好，各种嘲笑，蔑视。前不久我看了微博的黑名单很是感慨，我大概几年前就不再拉黑任何人，也不删除任何网友的侮辱和嘲讽的语言了，来到38岁的我少了很多意气，看淡了很多很多，也不争什么名，能把家庭管理好，把公司管理好，照顾好厂里几名职工的生活，把客户服务好，让客户放心，人生就阔以了。
但是有一点我想是非常非常重要，也是我写这篇文章的核心用意，任何时候都要坚持努力，坚持自己，相信自己，不要责备没有好的家庭环境，也不要责备自己天赋很差，就在能力范围内，做好自己，一切美好的事情都将自然到来，人只有一个人生，无论我们如何书写，如何定义，都只有一个人生，所以能努力一点就努力一点，谢谢。</description>
    </item>
    
    <item>
      <title>Elasticsearch学习记录</title>
      <link>https://blog.sailfishc.cn/posts/learn_es_mind/</link>
      <pubDate>Fri, 31 Mar 2017 17:58:27 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/learn_es_mind/</guid>
      <description></description>
    </item>
    
    <item>
      <title>解决Mysql存储Emoji乱码问题</title>
      <link>https://blog.sailfishc.cn/posts/emoji_demo/</link>
      <pubDate>Fri, 31 Mar 2017 17:58:27 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/emoji_demo/</guid>
      <description>最近开发的小伙伴们在开发一个社区模块的时候发现目前数据库存储Emoji表情有问题，会出现乱码的情况，之后是这么解决的：UTF-8转为utf8mb4，但是这种操作数据库的方式很不好，然后就找到了这种方式解决。
 在解决之前，得先说明一下为什么会出现乱码，Emoji表情占用4个字节，但是MySQL数据库UTF-8编码最多只能存储3个字节，就会导致存储不进去，在读取的时候读取不完整，导致乱码，那Unicode和UTF-8有什么区别呢？ - 字符编码笔记
总的就一句话，UTF-8是Unicode的一种实现。
一、如何解决Emoji存储问题  Github地址解决方案  再来摘抄一遍自己的笔记：mysql 的 utf8编码的一个字符最多3个字节，但是一个emoji表情为4个字节，所以utf8不支持存储emoji表情。但是utf8的超集utf8mb4一个字符最多能有4字节，所以能支持emoji表情的存储。但是修改这个配置太繁琐了，容易出错，emoji-java这个库可以在代码段解决这个问题，解决思路： - 页面有一个表情😁，在经过处理之后可以是😄,将这个字符存入数据库 - 读取的时候可以将😄这个字符转为😁
例如： 😁 我可以存储为😄，😭存储为😢，等等，可以这样映射起来。
1、引入依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.vdurmont&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;emoji-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.2.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  2、常用API  @RequestMapping(&amp;quot;/add/content&amp;quot;) public ResponseEntity insertContent(@RequestBody Content content) { String title = content.getTitle(); String titles = EmojiParser.parseToAliases(title); content.setTitle(titles); Integer integer = emojiMapper.insertContent(content); if (integer == 1) { return ResponseEntity.ok().build(); } return ResponseEntity.badRequest().build(); } @RequestMapping(&amp;quot;/get/{id}&amp;quot;) public Content getById(@PathVariable(&amp;quot;id&amp;quot;) Integer id) { Content content = emojiMapper.</description>
    </item>
    
    <item>
      <title>Mac下Elasticsearch5.X和Head插件的安装</title>
      <link>https://blog.sailfishc.cn/posts/es_head_install/</link>
      <pubDate>Sat, 25 Mar 2017 14:37:00 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/es_head_install/</guid>
      <description>Elasticsearch5.x的安装：在ELK升级到5.0之后，有些特性发生了变化，例如全部使用JDK8，插件变化和环境校验等。
 一、安装Elasticsearch  在官网下载tar包，下载地址 下载之后解压 进入bin目录下启动 &amp;gt; 备注：如果是root用户启动会出现异常，因为es出去安全性考虑，禁止以root用户启动，解决办法是新建一个用户，详情请看这篇博客：CENTOS安装ElasticSearch。
 进入es的conf目录修改配置文件
cluster.name: es-cluster node.name: node-1 network.host: 0.0.0.0 http.port: 9200  启动ES，命令如下
 ./elasticsearch ./elasticsearch -d (这是后台启动）  看到如下日志信息：
[2017-03-25T14:30:45,189][INFO ][o.e.n.Node ] [node-1] initializing ... [2017-03-25T14:30:45,272][INFO ][o.e.e.NodeEnvironment ] [node-1] using [1] data paths, mounts [[/ (/dev/disk1)]], net usable_space [278.8gb], net total_space [464.6gb], spins? [unknown], types [hfs] [2017-03-25T14:30:45,272][INFO ][o.e.e.NodeEnvironment ] [node-1] heap size [1.9gb], compressed ordinary object pointers [true] [2017-03-25T14:30:45,273][INFO ][o.</description>
    </item>
    
    <item>
      <title>Jenkins Maven Git SpringBoot Jar War Linux持续集成</title>
      <link>https://blog.sailfishc.cn/posts/deploy_springboot_jenkins/</link>
      <pubDate>Fri, 24 Mar 2017 15:12:00 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/deploy_springboot_jenkins/</guid>
      <description>一、前言 公司一直使用的是Java语言进行开发，自然而然逐渐的使用SpringBoot替代原来的框架，特别是对于现在的spring cloud微服务来说，一个项目由多个小项目组成，每个小项目都独立部署，使用jenkins是最好的部署和管理工具了。
Jenkins大概就这么工作： - 拉取GIT/SVN 等仓库的文件 - 然后使用Maven/Ant/Gradle等构件工具进行Build - 构建成功之后会进行部署（deploy）
二、安装  Jenkins官网 下载War包或者Jar包都可以（推荐war包，适合新手，也比较稳定）   安装（略过） 安装条件  JDK MAVEN  插件安装  - 必备插件 - Git plugin - Maven Integration plugin - publish over ssh插件（用于上传打包好的项目到远程Linux） - 插件列表（太多不一一列出）
三、配置  此处省略jdk(请注意服务器上需要安装jdk，而不是jre)、maven、git的安装
 1、系统配置 在系统管理中找到Global Tool Configurations,其中包含jdk、git、maven等工具的配置
注意： 请勾掉自动安装，自己手动安装以上工具后再进行配置
三、新建项目 这里我们选择创建Maven项目：
如果在源码管理中出现如下红色代码，说明是本机的用户没有配置Git用户授权
这里使用了Git作为源码管理工具，先配置SSH Key，在Jenkins的证书管理中添加SSH。在Jenkins管理页面，选择“Credentials”，然后选择“Global credentials (unrestricted)”，点击“Add Credentials”，如下图所示，我们填写自己的SSH信息，然后点击“Save”，这样就把SSH添加到Jenkins的全局域中去了。
 备注：Passphrase这里不用填值，这是自动生成的。 如何配置Git ssh解决上述ssh key问题，可参考以下教程链接 http://www.linuxidc.com/Linux/2014-10&amp;frasl;108080.htm
 配置成功后选择配置的用户，就发现已经没有红色的提示，说明ssh key配置成功了 1、构建  备注：这里的Root Pom指的是根目录下的Pom文件</description>
    </item>
    
    <item>
      <title>如何高效学习，总结自己的学习方法</title>
      <link>https://blog.sailfishc.cn/posts/learn_good/</link>
      <pubDate>Wed, 22 Mar 2017 22:37:00 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/learn_good/</guid>
      <description>在工作之后一段时间一直会有这么一种感觉：一天浑浑噩噩不知道干了什么，或者整天被他人打断而不能专注，又或者从早到晚的忙导致下班头脑发胀。
 自己也在寻找适合自己的学习方法，可能是学习能力比较差，一直没找到合适的，很多人推荐的番茄工作法自己尝试了几次也放弃了，但是现在工作每天都很忙，但是不知道自己干嘛了，这促使我又开始寻找一个适合自己的工具和学习方法。
这次的主题分两部分： - 工具 - 学习方法
一、工具 还是从番茄工作法开始了，再看了其他的学习法之后觉得还是回归到番茄工作法，原因就是简单，并且理论上是可行的，我一直坚定的认为只有理论正确，行动才不会走弯路。 - 我的番茄工作流程
这里区分两个工具： - 一个任务清单软件，例如滴答清单 - 一个番茄钟，这里推荐Chrome插件版的番茄钟
1、List清单负责维护近期的活动清单
2、计时插件界面简洁还提供了统计和云同步功能。
3、简单的excel表格用来记录每天的完成情况
 备注：Excel是一个额外的动作，主要是为了知道自己每天做了什么，在番茄钟运行的过程中很可能因为外部原因或者内部原因导致中断，如果中断了就如实的记录下来。
 二、学习方法 这里的学习方法不是指某个具体学科的学习方法，而是对知识的一个统一轮廓，就是一个大的概念，不是那种21天精通Java等等，也就是一个理论加实践的过程，很多时候最基础的就是最好的，学习方法其实在上学的时候老师就会经常说，就是：预习+认真听讲+复习，在1W小时训练的基础上很大一部分就是重复，但是是要有目的的重复。
 我的理论基础  我们获取知识的渠道多种多样，但是最终的目的就是为了在用的时候可以想起来或者可以灵活运用（在大脑中建立起联系），也就像写代码，有输入，有输入，在中间环节进行了转换而已，我大概理了一下，知识的获取有这么一些渠道： - 官网文档 - 博客 - GitHub等 - 视频资源 - 书籍 - 门户网站 - 各类信息类APP - 微信公众账号 - &amp;hellip;&amp;hellip;.
总的来说，我已吸收知识的时间段分为： - 即时知识 - 延时知识
即时知识是在看的过程中就可以消化的了，知识量比较少，常见的是为了解决一个问题去百度或者Google或者查找资料找到了解决办法，或者是一些非专业性知识等，再或者是在大片时间去看书，延时知识是我们经常用到的知识，例如一片专业的博客或者资料没时间看会保存在笔记类软件中或者是类似POCKET这种稍后阅读软件中，然后有时间再看。
 基于此知识体系我理出的流程就是知识输入，中间转化，然后输出，有必要（精华）再分享，在复习即可，关于复习这其实是很重要的一步，这也是重复练习和记录笔记重要的一步，我也一直没做好这步，具体操作有以下几个步骤。
 以周作为一个小单元，月作为一个大单元，每周给自己安排一段时间专门进行知识的复习，清空自己在POCKET中存储的List，将没用的清除掉，有用的整理为笔记存储，然后也从Pocket中清除掉，不要把没经过自己大脑思考的东西记录到笔记中，如果有必要，将自己的笔记整理为博客发表，关于学习，用好工具也是相当必要的，推荐几款上面说到不同阶段的工具。
 输入工具
 pocket 开发者头条 掘金 知乎 简书 各类博客  中间转化</description>
    </item>
    
    <item>
      <title>Java程序员学习路线</title>
      <link>https://blog.sailfishc.cn/posts/java%E7%A8%8B%E5%BA%8F%E5%91%98%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</link>
      <pubDate>Wed, 01 Mar 2017 17:58:27 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/java%E7%A8%8B%E5%BA%8F%E5%91%98%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</guid>
      <description>从认真开始学习Java到从事Java工作到现在，已经有一年时间了，在之前的学习过程中大多是通过视频进行学习的，没有工作上的经验，也就没有深入思考，刚开始想的就是会用就好，但是在工作之后发现，除了会用，还得要去思考，当然，在工作中需要学习的东西太多太多了，目前的关键就是找到适合自己的学习方法，培养起来快速学习的能力，在此之前，就是一段迷茫期，也算是在迷茫中进行探索，也走了很多弯路，得出一句话，经典的未必适合自己，别人的成功经验也不是自己的。 在JavaEE这条路上，之前我是这么认识的，首先应该学习Java基础，然后开始学习JavaWeb，在JavaWeb学习中避免不了要学习三大框架，当然，数据库知识也是要有的，以及一定的前端知识，这样就可以做出一个网站了。但是随着工作经验的增加，对于做产品这件事情也有了和之前不一样的理解，首先是对这种大而全的概念已经没有了，认识到了一个更加广阔的世界之后，就会发现自己能力的渺小，你就更加的认识了自己，会衡量自己能不能做，这算是一个优点，但也会是自己能力的瓶颈，具体我就不举例子，Java可以做很多事情，从片面的B/S结构到目前理解的B/S结构，一年的时间真的可以改变一个人很多。 感觉有点跑题了，说回来，还是怎么学习：
1、你得对你所在行业的知识框架要有一个基本的了解  比如我所在的JavaEE的学习路线：
 Java基础 - 基础语法 - 逻辑控制流 - 面向对象的知识 - 常用的类，如String - IO - 集合 - 多线程 - 异常 - 网络编程
JavaWeb - html/css/js相关基础知识 - xml相关配置 - Tomcat服务器 - Servlet/JSP - 数据库相关知识 - 过滤器，监听器 - ajax - session/cookie - jdbc
框架相关(会用即可) - spring - springmvc - myBatis
这是最基础的知识，这个层面就是先会用，可以在网上找一个网上商城的例子用来练习，把整体的代码思路看看，就算是OK了。 在实习工作期间，主要是适应公司的代码环境，这时候要会用一定的工具，类似版本控制，项目管理工具等： - GIT - SVN - Maven
这些工具的基本操作学习用不了多久，但是会给你带动很高的效率，在这之后，就是真正开始自己学习的过程，这才是提高的过程，你得根据自己的实际情况开始自己学习，不再依赖于视频教程，更多的是来源于书籍和自己实际项目的思考，首先要将业务需求转化为自己的代码实现，这是最关键的，其次是思考，怎么写更好，这是一个模仿+思考的过程，你要了解系统的整体结构是什么，用到了哪些技术，日志是怎么处理的，异常是怎么处理的，最关键的是要有自己的代码风格。
2、一次项目交接的思考 前几天有个同事要离职了，他的项目需要进行交接，我最近工作量比较少，就由我进行交接，这几天我觉得是我好几个月来成长最快的几天，我和他单独交流，因为项目是新建的一个项目，项目中业务信息不多，所以好理解，两天时间，基本上就可以上手了，之后的一天里我就一直和他在聊系统的设计思路和编码风格以及如何提高自己的编码水平。 很多人在做项目的时候思考的是如何做出来，也包括我，但是没有思考怎么做更好，他说他在做这个项目中删除了很多代码，想了好几套方法去解决，最终是保留了一套觉得自己好的，在这里，它借鉴了两个框架的设计思路，他没有深入了解过一个框架，但是大体了解一些，通过在写项目的过程中它看了些框架的源码，借鉴了一些它的思路，慢慢的也就有了一个从需求很不明确，没有的项目到现在也算是一个产品的项目，这其中花费了自己很大的心思。 我一直觉得自己的代码写的很烂，也一直想提高，但是苦于不知道如何提高，听了他的这些话，我就在想，目前我有基本的编码基础，我应该怎样提高，做项目？目前没有太多的时间去完整的做一个项目，最好的开端就是借鉴，从一个开源框架中借鉴它的思路，学习它的设计模式，编码风格，对工具类的封装，对功能的实现，这就像是你刚来公司的时候，要学习公司项目一样，但是这种开源框架会比较大，也比较难，不会像公司项目那样相对容易的让你去学习，但是坚持下去，总会有改变。</description>
    </item>
    
    <item>
      <title>使用 Github 空间搭建 Hexo 技术博客--安装篇（基于 IntelliJ IDEA）</title>
      <link>https://blog.sailfishc.cn/posts/hexo/</link>
      <pubDate>Sun, 28 Feb 2016 17:58:27 +0000</pubDate>
      
      <guid>https://blog.sailfishc.cn/posts/hexo/</guid>
      <description>部署前介绍  这篇博客引自code.youmeek.com  Hexo 是什么  Hexo 的中文官网：http://hexo.io/zh-cn/ 作者 Tommy Chen：https://zespia.tw/ 在我的理解里面：Hexo 是一个基于 Node.js 快速、简洁且高效的博客框架，可以将 Markdown 文件快速的生成静态网页，托管在 GitHub Pages 上。 而官网自己是这样说的：   Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。
 为什么要用 Hexo  我：因为其他博客框架太烂了 Tommy Chen：https://zespia.tw/blog/2012/10/11/hexo-debut/  适合人群  有 IntelliJ IDEA 基础的程序员（或者你使用的是 JetBrains 家的其他产品） 只想搭建一个技术博客的人（真心别搞太多，你没那么多精力）  文章要求  如果是 Git，Node.js 的新人，则这篇文章不要间断操作，要一气呵成，不然可能会遇到各种问题。  本文环境  系统：  Windows 10（64 位）  软件：  git：2.7.0.2-64-bit IntelliJ IDEA：15.0.4 node.js：v5.7.0-64-bit Stable  账号：  Github：https://github.</description>
    </item>
    
  </channel>
</rss>